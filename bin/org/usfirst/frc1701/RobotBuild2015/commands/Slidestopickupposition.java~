// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1701.RobotBuild2015.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1701.RobotBuild2015.Robot;
import org.usfirst.frc1701.RobotBuild2015.RobotMap;

/**
 *
 */
public class  Slidestopickupposition extends Command {

	boolean finished = false;
	boolean extended, retracted;
    public Slidestopickupposition() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.slides);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	extended = RobotMap.elevatorRightSlideLimitSwitchExtended.get();
    	retracted = RobotMap.elevatorLeftSlideLimitSwitchRetracted.get();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	finished = false;
    	if(extended){
    		if(!RobotMap.elevatorRightSlideLimitSwitchTote.get()){
        		RobotMap.elevatorExtendMotorL.set(-1.0);
        		RobotMap.elevatorExtendMotorR.set(1.0);
        	}else{
        		RobotMap.elevatorExtendMotorL.set(0);
        		RobotMap.elevatorExtendMotorR.set(0);
        		finished = true;
        	}
    	}else if(retracted){
    		if(!RobotMap.elevatorRightSlideLimitSwitchTote.get()){
        		RobotMap.elevatorExtendMotorL.set(1.0);
        		RobotMap.elevatorExtendMotorR.set(-1.0);
        	}else{
        		RobotMap.elevatorExtendMotorL.set(0);
        		RobotMap.elevatorExtendMotorR.set(0);
        		finished = true;
        	}
    	}else{
    		RobotMap.elevatorExtendMotorL.set(0);
    		RobotMap.elevatorExtendMotorR.set(0);
    		finished = true;
    	}
    		
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	finished = true;
    }
}
