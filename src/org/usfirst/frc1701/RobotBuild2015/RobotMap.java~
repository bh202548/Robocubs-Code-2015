// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1701.RobotBuild2015;
    

import com.kauailabs.nav6.frc.IMUAdvanced;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static CANTalon drivetrainDriveMotorFL;
    public static CANTalon drivetrainDriveMotorFR;
    public static CANTalon drivetrainDriveMotorBR;
    public static CANTalon drivetrainDriveMotorBL;
    public static CANTalon drivetrainSteerMotorFL;
    public static CANTalon drivetrainSteerMotorFR;
    public static CANTalon drivetrainSteerMotorBR;
    public static CANTalon drivetrainSteerMotorBL;
    public static CANTalon elevatorElevatorMotorL;
    public static CANTalon elevatorElevatorMotorR;
    public static CANTalon elevatorExtendMotorL;
    public static CANTalon elevatorExtendMotorR;
    public static CANTalon doorsDoorMotorL;
    public static CANTalon doorsDoorMotorR;
    public static IMUAdvanced imu;
    public static SerialPort serial_port;
    public static I2C i2c;
    //IMU imu;  // Alternatively, use IMUAdvanced for advanced features
    public static boolean first_iteration;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder drivetrainSteerEncoderFL;
    public static Encoder drivetrainSteerEncoderBL;
    public static Encoder drivetrainSteerEncoderFR;
    public static Encoder drivetrainSteerEncoderBR;
    public static Encoder elevatorElevatorEncoder;
    public static DigitalInput elevatorIntakeTouchL;
    public static DigitalInput elevatorIntakeTouchR;
    public static DigitalInput doorsDoorOpenL;
    public static DigitalInput doorsDoorOpenR;
    public static DigitalInput doorsDoorCloseL;
    public static DigitalInput doorsDoorCloseR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
    	try {
    		
    	    serial_port = new SerialPort(57600,SerialPort.Port.kUSB);
    	            
    	            // You can add a second parameter to modify the 
    	            // update rate (in hz) from 4 to 100.  The default is 100.
    	            // If you need to minimize CPU load, you can set it to a
    	            // lower value, as shown here, depending upon your needs.
    	            
    	            // You can also use the IMUAdvanced class for advanced
    	            // features.
    	            
    	            byte update_rate_hz = 100;
    	            //imu = new IMU(serial_port,update_rate_hz);
    	            RobotMap.imu = new IMUAdvanced(serial_port,update_rate_hz);
    	    } catch( Exception ex ) {
    	            
    	    }
    	    if ( RobotMap.imu != null ) {
    	        LiveWindow.addSensor("IMU", "Gyro", RobotMap.imu);
    	    }
    	    first_iteration = true;
    	drivetrainDriveMotorFL = new CANTalon(1);
        
        drivetrainDriveMotorFR = new CANTalon(3);
        
        drivetrainDriveMotorBR = new CANTalon(4);
        
        drivetrainDriveMotorBL = new CANTalon(2);
        
        drivetrainSteerMotorFL = new CANTalon(5);
        
        drivetrainSteerMotorFR = new CANTalon(7);
        
        drivetrainSteerMotorBR = new CANTalon(8);
        
        drivetrainSteerMotorBL = new CANTalon(6);
        
//        elevatorElevatorMotorL = new CANTalon(9);
//        
//        elevatorElevatorMotorR = new CANTalon(10);
//        
//        elevatorElevatorMotorL = new CANTalon(11);
//        
//        elevatorElevatorMotorR = new CANTalon(12);
//        
//        doorsDoorMotorL = new CANTalon(13);
//        
//        doorsDoorMotorR = new CANTalon(14);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainSteerEncoderFL = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Steer Encoder FL", drivetrainSteerEncoderFL);
        drivetrainSteerEncoderFL.setDistancePerPulse(1.0);
        drivetrainSteerEncoderFL.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainSteerEncoderBL = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Steer Encoder BL", drivetrainSteerEncoderBL);
        drivetrainSteerEncoderBL.setDistancePerPulse(1.0);
        drivetrainSteerEncoderBL.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainSteerEncoderFR = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Steer Encoder FR", drivetrainSteerEncoderFR);
        drivetrainSteerEncoderFR.setDistancePerPulse(1.0);
        drivetrainSteerEncoderFR.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainSteerEncoderBR = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Steer Encoder BR", drivetrainSteerEncoderBR);
        drivetrainSteerEncoderBR.setDistancePerPulse(1.0);
        drivetrainSteerEncoderBR.setPIDSourceParameter(PIDSourceParameter.kRate);
        elevatorElevatorEncoder = new Encoder(8, 9, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Elevator Encoder", elevatorElevatorEncoder);
        elevatorElevatorEncoder.setDistancePerPulse(1.0);
        elevatorElevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        elevatorIntakeTouchL = new DigitalInput(10);
        LiveWindow.addSensor("Elevator", "Intake Touch L", elevatorIntakeTouchL);
        
        elevatorIntakeTouchR = new DigitalInput(11);
        LiveWindow.addSensor("Elevator", "Intake Touch R", elevatorIntakeTouchR);
        
        doorsDoorOpenL = new DigitalInput(12);
        LiveWindow.addSensor("Doors", "Door Open L", doorsDoorOpenL);
        
        doorsDoorOpenR = new DigitalInput(13);
        LiveWindow.addSensor("Doors", "Door Open R", doorsDoorOpenR);
        
        doorsDoorCloseL = new DigitalInput(14);
        LiveWindow.addSensor("Doors", "Door Close L", doorsDoorCloseL);
        
        doorsDoorCloseR = new DigitalInput(15);
        LiveWindow.addSensor("Doors", "Door Close R", doorsDoorCloseR);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
