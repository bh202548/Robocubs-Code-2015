// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1701.RobotBuild2015.commands;

import org.usfirst.frc1701.RobotBuild2015.Robot;
import org.usfirst.frc1701.RobotBuild2015.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class  AutonomousCommand extends Command {

	boolean finished = false;
	Timer timer;
	double auton = 0;
	int stage = 0;
	double timeold = 0;
	
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer = new Timer();
    	timer.start();
    	stage = 0;
    	RobotMap.elevatorHeight = 0;
    	auton = SmartDashboard.getNumber("Auton", 0);
    	if(auton == 0){
    		SmartDashboard.putNumber("Auton", 0);
    	}
    	RobotMap.initialzed = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	finished = false;
    	if(timer.get() > 15){
    		finished = true;
    	}
    	if(!RobotMap.initialzed){
			RobotMap.drivetrainSteerEncoderFL.reset();
			RobotMap.drivetrainSteerEncoderFR.reset();
			RobotMap.drivetrainSteerEncoderBL.reset();
			RobotMap.drivetrainSteerEncoderBR.reset();
			RobotMap.initialzed = true;
		}
    	SmartDashboard.putBoolean("ir thing", RobotMap.elevatorIRToteIn.get());
    	SmartDashboard.putNumber("stage", stage);
    	switch((int)auton){
    	case 1:
    		new AutonOneTote().start();
    		break;
    	case 2:
    		new AutonThreeTote().start();
    		break;
    	default:
    		new AutonDriveForward().start();
    		break;
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	stage = 0;
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
